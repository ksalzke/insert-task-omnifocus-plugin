/* global PlugIn Form Task moveTasks cleanUp */
/* eslint spaced-comment: ["error", "always", { "exceptions": ["{"] }] */
/*{
"type": "action",
"targets": ["omnifocus"],
"author": "Kaitlin Salzke",
"identifier": "com.KaitlinSalzke.InsertTask",
"version": "1.0",
"description": "Insert a task before or after the current task",
"label": "Insert Task",
"shortLabel": "Insert Task"
}*/
(() => {
  const action = new PlugIn.Action(async (selection, sender) => {
    // load function library - used to get parent task
    const functionLibrary = PlugIn.find(
      'com.KaitlinSalzke.functionLibrary'
    ).library('functionLibrary')

    // FORM - to prompt user for task to insert
    const form = new Form()
    form.addField(new Form.Field.String('name', 'Name', null))
    form.addField(
      new Form.Field.Checkbox('before', 'Before current task', false)
    )
    await form.show('Task to insert: ', 'Insert')

    // INSERT TASK
    const task = selection.tasks[0]
    const parentTask = functionLibrary.getParent(task)

    if (!parentTask.sequential) {
      // contained within parallel action group - add parent action group and move original task inside group
      const newParent = new Task('', task.before)
      newParent.sequential = true
      moveTasks([task], newParent.ending)
    }

    if (form.values.before) {
      /* eslint-disable no-new */
      new Task(form.values.name, task.before)
    } else {
      /* eslint-disable no-new */
      new Task(form.values.name, task.after)
    }

    cleanUp()
  })

  action.validate = (selection, sender) => {
    // available if a single task is selected
    return selection.tasks.length === 1
  }

  return action
})()
